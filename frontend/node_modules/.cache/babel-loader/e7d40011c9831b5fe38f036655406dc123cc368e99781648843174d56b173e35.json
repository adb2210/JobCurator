{"ast":null,"code":"\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import JobCard from \"../components/JobCard\";\n// import axios from \"axios\";\n\n// const JobsPage = () => {\n//   const navigate = useNavigate();\n//   const [activeTab, setActiveTab] = useState(\"forYou\");\n//   const [recommendedJobs, setRecommendedJobs] = useState([]);\n//   const [allJobs, setAllJobs] = useState([]);\n//   const [searchTitle, setSearchTitle] = useState(\"\");\n//   const [searchCompany, setSearchCompany] = useState(\"\"); \n//   const [searchLocation, setSearchLocation] = useState(\"\");\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\"); \n//   const [filteredJobs, setFilteredJobs] = useState([]);\n\n//   useEffect(() => {\n//     // Check if user is logged in\n//     const user = localStorage.getItem(\"authToken\");\n//     if (user) {\n//       setIsLoggedIn(true);\n//     } else {\n//       setIsLoggedIn(false);\n//       navigate(\"/login\");\n//     }\n\n//     // Mock Recommended Jobs\n//     const mockRecommendedJobs = [\n//       { id: 2, role: \"Full-Stack Developer\", company: \"Google\", location: \"Mountain View, CA, USA\", source: \"LinkedIn\" },\n//       { id: 3, role: \"Data Scientist\", company: \"Meta\", location: \"Menlo Park, CA, USA\", source: \"Indeed\" },\n//       { id: 4, role: \"Machine Learning Engineer\", company: \"Amazon\", location: \"Seattle, WA, USA\", source: \"Company Careers\" },\n//       { id: 5, role: \"Cloud Solutions Architect\", company: \"Microsoft\", location: \"Redmond, WA, USA\", source: \"Employee Referral\" }\n//     ];\n//     setRecommendedJobs(mockRecommendedJobs);\n\n//   }, [navigate]);\n\n//   const fetchAllJobs = async () => {\n//     setLoading(true);\n//     try {\n//       const response = await axios.get(\"http://localhost:8080/api/jobs/all\");\n//       if (response.status === 200) {\n//         setAllJobs(response.data);\n//         setFilteredJobs(response.data); // Initially, set filtered jobs to all jobs\n//       } else {\n//         setError(`Error: ${response.statusText}`);\n//       }\n//     } catch (err) {\n//       console.error(\"Error fetching jobs:\", err);\n//       setError(\"Network error. Please try again later.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = () => {\n//     const filtered = allJobs.filter(\n//       (job) =>\n//         job.role.toLowerCase().includes(searchTitle.toLowerCase()) &&\n//         job.company.toLowerCase().includes(searchCompany.toLowerCase()) &&\n//         job.location.toLowerCase().includes(searchLocation.toLowerCase())\n//     );\n//     setFilteredJobs(filtered); // Update filtered jobs\n//     setActiveTab(\"search\"); // Switch to search tab\n//   };\n\n//   if (!isLoggedIn) return null;\n\n//   return (\n//     <div className=\"p-6 pt-24 max-w-5xl mx-auto\">\n//       {/* Search Bar */}\n//       <div className=\"flex flex-col sm:flex-row justify-center items-center gap-4 mb-6 bg-gray-100 p-4 rounded-lg shadow\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Find your perfect job\"\n//           value={searchTitle}\n//           onChange={(e) => setSearchTitle(e.target.value)}\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-2/3 focus:ring-2 focus:ring-[#00ADB5]\"\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Company\"\n//           value={searchCompany}\n//           onChange={(e) => setSearchCompany(e.target.value)} \n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Location\"\n//           value={searchLocation}\n//           onChange={(e) => setSearchLocation(e.target.value)}\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\n//         />\n//         <button\n//           onClick={handleSearch}\n//           className=\"p-3 bg-[#00ADB5] text-white rounded-md w-full sm:w-auto\"\n//         >\n//           Search\n//         </button>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"flex justify-center gap-10 border-b mb-6\">\n//         <button\n//           className={`pb-2 text-lg font-semibold ${\n//             activeTab === \"forYou\"\n//               ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\n//               : \"text-gray-600\"\n//           }`}\n//           onClick={() => setActiveTab(\"forYou\")}\n//         >\n//           For you\n//         </button>\n//         <button\n//           className={`pb-2 text-lg font-semibold ${\n//             activeTab === \"search\"\n//               ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\n//               : \"text-gray-600\"\n//           }`}\n//           onClick={() => {\n//             if (allJobs.length === 0) fetchAllJobs();\n//             setActiveTab(\"search\");\n//           }}\n//         >\n//           Search\n//         </button>\n//       </div>\n\n//       {/* Tab Content */}\n//       {activeTab === \"forYou\" && (\n//         <div>\n//           <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">\n//             Recommended Jobs\n//           </h2>\n//           <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n//             {recommendedJobs.map((job) => (\n//               <JobCard key={job.id} job={job} />\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//       {activeTab === \"search\" && (\n//         <div>\n//           <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">All Jobs</h2>\n//           <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n//             {loading ? (\n//               <p>Loading jobs...</p>\n//             ) : filteredJobs.length > 0 ? (\n//               filteredJobs.map((job) => <JobCard key={job.id} job={job} />)\n//             ) : (\n//               <p className=\"text-gray-500\">No jobs found.</p>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JobsPage;","map":{"version":3,"names":[],"sources":["D:/project/web/job-portal/src/pages/JobsPage.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import JobCard from \"../components/JobCard\";\r\n// import axios from \"axios\";\r\n\r\n// const JobsPage = () => {\r\n//   const navigate = useNavigate();\r\n//   const [activeTab, setActiveTab] = useState(\"forYou\");\r\n//   const [recommendedJobs, setRecommendedJobs] = useState([]);\r\n//   const [allJobs, setAllJobs] = useState([]);\r\n//   const [searchTitle, setSearchTitle] = useState(\"\");\r\n//   const [searchCompany, setSearchCompany] = useState(\"\"); \r\n//   const [searchLocation, setSearchLocation] = useState(\"\");\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(\"\"); \r\n//   const [filteredJobs, setFilteredJobs] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Check if user is logged in\r\n//     const user = localStorage.getItem(\"authToken\");\r\n//     if (user) {\r\n//       setIsLoggedIn(true);\r\n//     } else {\r\n//       setIsLoggedIn(false);\r\n//       navigate(\"/login\");\r\n//     }\r\n\r\n//     // Mock Recommended Jobs\r\n//     const mockRecommendedJobs = [\r\n//       { id: 2, role: \"Full-Stack Developer\", company: \"Google\", location: \"Mountain View, CA, USA\", source: \"LinkedIn\" },\r\n//       { id: 3, role: \"Data Scientist\", company: \"Meta\", location: \"Menlo Park, CA, USA\", source: \"Indeed\" },\r\n//       { id: 4, role: \"Machine Learning Engineer\", company: \"Amazon\", location: \"Seattle, WA, USA\", source: \"Company Careers\" },\r\n//       { id: 5, role: \"Cloud Solutions Architect\", company: \"Microsoft\", location: \"Redmond, WA, USA\", source: \"Employee Referral\" }\r\n//     ];\r\n//     setRecommendedJobs(mockRecommendedJobs);\r\n\r\n//   }, [navigate]);\r\n\r\n//   const fetchAllJobs = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:8080/api/jobs/all\");\r\n//       if (response.status === 200) {\r\n//         setAllJobs(response.data);\r\n//         setFilteredJobs(response.data); // Initially, set filtered jobs to all jobs\r\n//       } else {\r\n//         setError(`Error: ${response.statusText}`);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Error fetching jobs:\", err);\r\n//       setError(\"Network error. Please try again later.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleSearch = () => {\r\n//     const filtered = allJobs.filter(\r\n//       (job) =>\r\n//         job.role.toLowerCase().includes(searchTitle.toLowerCase()) &&\r\n//         job.company.toLowerCase().includes(searchCompany.toLowerCase()) &&\r\n//         job.location.toLowerCase().includes(searchLocation.toLowerCase())\r\n//     );\r\n//     setFilteredJobs(filtered); // Update filtered jobs\r\n//     setActiveTab(\"search\"); // Switch to search tab\r\n//   };\r\n\r\n//   if (!isLoggedIn) return null;\r\n\r\n//   return (\r\n//     <div className=\"p-6 pt-24 max-w-5xl mx-auto\">\r\n//       {/* Search Bar */}\r\n//       <div className=\"flex flex-col sm:flex-row justify-center items-center gap-4 mb-6 bg-gray-100 p-4 rounded-lg shadow\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Find your perfect job\"\r\n//           value={searchTitle}\r\n//           onChange={(e) => setSearchTitle(e.target.value)}\r\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-2/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Company\"\r\n//           value={searchCompany}\r\n//           onChange={(e) => setSearchCompany(e.target.value)} \r\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Location\"\r\n//           value={searchLocation}\r\n//           onChange={(e) => setSearchLocation(e.target.value)}\r\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n//         />\r\n//         <button\r\n//           onClick={handleSearch}\r\n//           className=\"p-3 bg-[#00ADB5] text-white rounded-md w-full sm:w-auto\"\r\n//         >\r\n//           Search\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Tabs */}\r\n//       <div className=\"flex justify-center gap-10 border-b mb-6\">\r\n//         <button\r\n//           className={`pb-2 text-lg font-semibold ${\r\n//             activeTab === \"forYou\"\r\n//               ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\r\n//               : \"text-gray-600\"\r\n//           }`}\r\n//           onClick={() => setActiveTab(\"forYou\")}\r\n//         >\r\n//           For you\r\n//         </button>\r\n//         <button\r\n//           className={`pb-2 text-lg font-semibold ${\r\n//             activeTab === \"search\"\r\n//               ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\r\n//               : \"text-gray-600\"\r\n//           }`}\r\n//           onClick={() => {\r\n//             if (allJobs.length === 0) fetchAllJobs();\r\n//             setActiveTab(\"search\");\r\n//           }}\r\n//         >\r\n//           Search\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Tab Content */}\r\n//       {activeTab === \"forYou\" && (\r\n//         <div>\r\n//           <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">\r\n//             Recommended Jobs\r\n//           </h2>\r\n//           <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n//             {recommendedJobs.map((job) => (\r\n//               <JobCard key={job.id} job={job} />\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {activeTab === \"search\" && (\r\n//         <div>\r\n//           <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">All Jobs</h2>\r\n//           <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n//             {loading ? (\r\n//               <p>Loading jobs...</p>\r\n//             ) : filteredJobs.length > 0 ? (\r\n//               filteredJobs.map((job) => <JobCard key={job.id} job={job} />)\r\n//             ) : (\r\n//               <p className=\"text-gray-500\">No jobs found.</p>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JobsPage;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}