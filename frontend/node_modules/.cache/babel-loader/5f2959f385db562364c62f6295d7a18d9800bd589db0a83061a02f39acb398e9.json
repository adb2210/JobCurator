{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\web\\\\job-portal\\\\src\\\\pages\\\\JobsPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import JobCard from \"../components/JobCard\";\n// import axios from \"axios\";\n\n// const JobsPage = () => {\n//   const navigate = useNavigate();\n//   const [activeTab, setActiveTab] = useState(\"forYou\");\n//   const [recommendedJobs, setRecommendedJobs] = useState([]);\n//   const [allJobs, setAllJobs] = useState([]);\n//   const [searchTitle, setSearchTitle] = useState(\"\");\n//   const [searchCompany, setSearchCompany] = useState(\"\"); \n//   const [searchLocation, setSearchLocation] = useState(\"\");\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(\"\"); \n//   const [filteredJobs, setFilteredJobs] = useState([]);\n\n//   useEffect(() => {\n//     // Check if user is logged in\n//     const user = localStorage.getItem(\"authToken\");\n//     if (user) {\n//       setIsLoggedIn(true);\n//     } else {\n//       setIsLoggedIn(false);\n//       navigate(\"/login\");\n//     }\n\n//     // Mock Recommended Jobs\n//     const mockRecommendedJobs = [\n//       { id: 2, role: \"Full-Stack Developer\", company: \"Google\", location: \"Mountain View, CA, USA\", source: \"LinkedIn\" },\n//       { id: 3, role: \"Data Scientist\", company: \"Meta\", location: \"Menlo Park, CA, USA\", source: \"Indeed\" },\n//       { id: 4, role: \"Machine Learning Engineer\", company: \"Amazon\", location: \"Seattle, WA, USA\", source: \"Company Careers\" },\n//       { id: 5, role: \"Cloud Solutions Architect\", company: \"Microsoft\", location: \"Redmond, WA, USA\", source: \"Employee Referral\" }\n//     ];\n//     setRecommendedJobs(mockRecommendedJobs);\n\n//   }, [navigate]);\n\n//   useEffect(() => {\n//     // Fetch all jobs only once on component mount\n//     const fetchAllJobs = async () => {\n//       setLoading(true);\n//       try {\n//         const response = await axios.get(\"http://localhost:8080/api/jobs/all\");\n//         if (response.status === 200) {\n//           setAllJobs(response.data);\n//           setFilteredJobs(response.data); // Initially, set filtered jobs to all jobs\n//         } else {\n//           setError(`Error: ${response.statusText}`);\n//         }\n//       } catch (err) {\n//         console.error(\"Error fetching jobs:\", err);\n//         setError(\"Network error. Please try again later.\");\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (allJobs.length === 0) {\n//       fetchAllJobs();\n//     }\n//   }, [allJobs]);\n\n//   // Automatically filter jobs based on search inputs\n//   useEffect(() => {\n//     const filtered = allJobs.filter(\n//       (job) =>\n//         (job.role && job.role.toLowerCase().includes(searchTitle.toLowerCase())) &&\n//         (job.company && job.company.toLowerCase().includes(searchCompany.toLowerCase())) &&\n//         (job.location && job.location.toLowerCase().includes(searchLocation.toLowerCase()))\n//     );\n//     setFilteredJobs(filtered); // Update filtered jobs\n//     setActiveTab(\"search\"); // Switch to search tab when filtering\n//   }, [searchTitle, searchCompany, searchLocation, allJobs]);\n\n//   if (!isLoggedIn) return null;\n\n//   return (\n//     <div className=\"p-6 pt-24 max-w-5xl mx-auto\">\n//       {/* Search Bar */}\n//       <div className=\"flex flex-col sm:flex-row justify-center items-center gap-4 mb-6 bg-gray-100 p-4 rounded-lg shadow\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Find your perfect job\"\n//           value={searchTitle}\n//           onChange={(e) => setSearchTitle(e.target.value)}\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-2/3 focus:ring-2 focus:ring-[#00ADB5]\"\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Company\"\n//           value={searchCompany}\n//           onChange={(e) => setSearchCompany(e.target.value)} \n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Location\"\n//           value={searchLocation}\n//           onChange={(e) => setSearchLocation(e.target.value)}\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\n//         />\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"flex justify-center gap-10 border-b mb-6\">\n//         <button\n//           className={`pb-2 text-lg font-semibold ${\n//             activeTab === \"forYou\"\n//               ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\n//               : \"text-gray-600\"\n//           }`}\n//           onClick={() => setActiveTab(\"forYou\")}\n//         >\n//           For you\n//         </button>\n//         <button\n//           className={`pb-2 text-lg font-semibold ${\n//             activeTab === \"search\"\n//               ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\n//               : \"text-gray-600\"\n//           }`}\n//           onClick={() => setActiveTab(\"search\")}\n//         >\n//           Search\n//         </button>\n//       </div>\n\n//       {/* Tab Content */}\n//       {activeTab === \"forYou\" && (\n//         <div>\n//           <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">\n//             Recommended Jobs\n//           </h2>\n//           <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n//             {recommendedJobs.map((job) => (\n//               <JobCard key={job.id} job={job} />\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//       {activeTab === \"search\" && (\n//         <div>\n//           <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">All Jobs</h2>\n//           <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n//             {loading ? (\n//               <p>Loading jobs...</p>\n//             ) : filteredJobs.length > 0 ? (\n//               filteredJobs.map((job) => <JobCard key={job.id} job={job} />)\n//             ) : (\n//               <p className=\"text-gray-500\">No jobs found.</p>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JobsPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport JobCard from \"../components/JobCard\";\nimport axios from \"axios\";\nimport jwtDecode from \"jwt-decode\"; // Ensure this package is installed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobsPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState(\"forYou\");\n  const [recommendedJobs, setRecommendedJobs] = useState([]);\n  const [allJobs, setAllJobs] = useState([]);\n  const [filteredJobs, setFilteredJobs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  // Function to decode token and get user email\n  const getUserEmail = () => {\n    const token = localStorage.getItem(\"authToken\");\n    if (!token) return null;\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.sub; // Assuming `sub` contains the email\n    } catch (error) {\n      console.error(\"Invalid token:\", error);\n      return null;\n    }\n  };\n\n  // Fetch Recommended Jobs for the User\n  const fetchRecommendedJobs = async email => {\n    try {\n      const response = await axios.get(`http://localhost:8080/api/jobs/recommended/${email}`);\n      return response.data; // Assuming API returns an array of jobs\n    } catch (err) {\n      console.error(\"Error fetching recommended jobs:\", err);\n      return [];\n    }\n  };\n\n  // Fetch All Jobs\n  const fetchAllJobs = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/jobs/all\");\n      if (response.status === 200) {\n        setAllJobs(response.data);\n      } else {\n        setError(`Error: ${response.statusText}`);\n      }\n    } catch (err) {\n      console.error(\"Error fetching jobs:\", err);\n      setError(\"Network error. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check similarity between two job titles\n  const isTitleSimilar = (title1, title2) => {\n    const normalize = str => str.toLowerCase().replace(/[^a-zA-Z0-9 ]/g, \"\");\n    return normalize(title1).includes(normalize(title2));\n  };\n\n  // Combine Recommended Jobs with Similar Jobs from All Jobs\n  const getCombinedRecommendedJobs = (recommended, all) => {\n    const similarJobs = all.filter(job => recommended.some(recJob => isTitleSimilar(job.role, recJob.role)));\n    return [...new Set([...recommended, ...similarJobs])];\n  };\n  useEffect(() => {\n    const initializeJobs = async () => {\n      const email = getUserEmail();\n      if (!email) {\n        navigate(\"/login\");\n        return;\n      }\n      const recommended = await fetchRecommendedJobs(email);\n      await fetchAllJobs();\n      const combinedRecommendedJobs = getCombinedRecommendedJobs(recommended, allJobs);\n      setRecommendedJobs(combinedRecommendedJobs);\n    };\n    initializeJobs();\n  }, [navigate, allJobs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 pt-24 max-w-5xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center gap-10 border-b mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `pb-2 text-lg font-semibold ${activeTab === \"forYou\" ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\" : \"text-gray-600\"}`,\n        onClick: () => setActiveTab(\"forYou\"),\n        children: \"For you\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `pb-2 text-lg font-semibold ${activeTab === \"search\" ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\" : \"text-gray-600\"}`,\n        onClick: () => setActiveTab(\"search\"),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), activeTab === \"forYou\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4 text-[#00ADB5]\",\n        children: \"Recommended Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\",\n        children: recommendedJobs.length > 0 ? recommendedJobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n          job: job\n        }, job.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 44\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500\",\n          children: \"No recommended jobs found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this), activeTab === \"search\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4 text-[#00ADB5]\",\n        children: \"All Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading jobs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 15\n        }, this) : filteredJobs.length > 0 ? filteredJobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n          job: job\n        }, job.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 41\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500\",\n          children: \"No jobs found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};\n_s(JobsPage, \"PgyFcQ/eAxqOs6GMKw55HGvEPUQ=\", false, function () {\n  return [useNavigate];\n});\n_c = JobsPage;\nexport default JobsPage;\nvar _c;\n$RefreshReg$(_c, \"JobsPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","JobCard","axios","jwtDecode","jsxDEV","_jsxDEV","JobsPage","_s","navigate","activeTab","setActiveTab","recommendedJobs","setRecommendedJobs","allJobs","setAllJobs","filteredJobs","setFilteredJobs","loading","setLoading","error","setError","getUserEmail","token","localStorage","getItem","decodedToken","sub","console","fetchRecommendedJobs","email","response","get","data","err","fetchAllJobs","status","statusText","isTitleSimilar","title1","title2","normalize","str","toLowerCase","replace","includes","getCombinedRecommendedJobs","recommended","all","similarJobs","filter","job","some","recJob","role","Set","initializeJobs","combinedRecommendedJobs","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","map","id","_c","$RefreshReg$"],"sources":["D:/project/web/job-portal/src/pages/JobsPage.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import JobCard from \"../components/JobCard\";\r\n// import axios from \"axios\";\r\n\r\n// const JobsPage = () => {\r\n//   const navigate = useNavigate();\r\n//   const [activeTab, setActiveTab] = useState(\"forYou\");\r\n//   const [recommendedJobs, setRecommendedJobs] = useState([]);\r\n//   const [allJobs, setAllJobs] = useState([]);\r\n//   const [searchTitle, setSearchTitle] = useState(\"\");\r\n//   const [searchCompany, setSearchCompany] = useState(\"\"); \r\n//   const [searchLocation, setSearchLocation] = useState(\"\");\r\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(\"\"); \r\n//   const [filteredJobs, setFilteredJobs] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Check if user is logged in\r\n//     const user = localStorage.getItem(\"authToken\");\r\n//     if (user) {\r\n//       setIsLoggedIn(true);\r\n//     } else {\r\n//       setIsLoggedIn(false);\r\n//       navigate(\"/login\");\r\n//     }\r\n\r\n//     // Mock Recommended Jobs\r\n//     const mockRecommendedJobs = [\r\n//       { id: 2, role: \"Full-Stack Developer\", company: \"Google\", location: \"Mountain View, CA, USA\", source: \"LinkedIn\" },\r\n//       { id: 3, role: \"Data Scientist\", company: \"Meta\", location: \"Menlo Park, CA, USA\", source: \"Indeed\" },\r\n//       { id: 4, role: \"Machine Learning Engineer\", company: \"Amazon\", location: \"Seattle, WA, USA\", source: \"Company Careers\" },\r\n//       { id: 5, role: \"Cloud Solutions Architect\", company: \"Microsoft\", location: \"Redmond, WA, USA\", source: \"Employee Referral\" }\r\n//     ];\r\n//     setRecommendedJobs(mockRecommendedJobs);\r\n\r\n//   }, [navigate]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch all jobs only once on component mount\r\n//     const fetchAllJobs = async () => {\r\n//       setLoading(true);\r\n//       try {\r\n//         const response = await axios.get(\"http://localhost:8080/api/jobs/all\");\r\n//         if (response.status === 200) {\r\n//           setAllJobs(response.data);\r\n//           setFilteredJobs(response.data); // Initially, set filtered jobs to all jobs\r\n//         } else {\r\n//           setError(`Error: ${response.statusText}`);\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching jobs:\", err);\r\n//         setError(\"Network error. Please try again later.\");\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     if (allJobs.length === 0) {\r\n//       fetchAllJobs();\r\n//     }\r\n//   }, [allJobs]);\r\n\r\n//   // Automatically filter jobs based on search inputs\r\n//   useEffect(() => {\r\n//     const filtered = allJobs.filter(\r\n//       (job) =>\r\n//         (job.role && job.role.toLowerCase().includes(searchTitle.toLowerCase())) &&\r\n//         (job.company && job.company.toLowerCase().includes(searchCompany.toLowerCase())) &&\r\n//         (job.location && job.location.toLowerCase().includes(searchLocation.toLowerCase()))\r\n//     );\r\n//     setFilteredJobs(filtered); // Update filtered jobs\r\n//     setActiveTab(\"search\"); // Switch to search tab when filtering\r\n//   }, [searchTitle, searchCompany, searchLocation, allJobs]);\r\n\r\n//   if (!isLoggedIn) return null;\r\n\r\n//   return (\r\n//     <div className=\"p-6 pt-24 max-w-5xl mx-auto\">\r\n//       {/* Search Bar */}\r\n//       <div className=\"flex flex-col sm:flex-row justify-center items-center gap-4 mb-6 bg-gray-100 p-4 rounded-lg shadow\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Find your perfect job\"\r\n//           value={searchTitle}\r\n//           onChange={(e) => setSearchTitle(e.target.value)}\r\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-2/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Company\"\r\n//           value={searchCompany}\r\n//           onChange={(e) => setSearchCompany(e.target.value)} \r\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Location\"\r\n//           value={searchLocation}\r\n//           onChange={(e) => setSearchLocation(e.target.value)}\r\n//           className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Tabs */}\r\n//       <div className=\"flex justify-center gap-10 border-b mb-6\">\r\n//         <button\r\n//           className={`pb-2 text-lg font-semibold ${\r\n//             activeTab === \"forYou\"\r\n//               ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\r\n//               : \"text-gray-600\"\r\n//           }`}\r\n//           onClick={() => setActiveTab(\"forYou\")}\r\n//         >\r\n//           For you\r\n//         </button>\r\n//         <button\r\n//           className={`pb-2 text-lg font-semibold ${\r\n//             activeTab === \"search\"\r\n//               ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\r\n//               : \"text-gray-600\"\r\n//           }`}\r\n//           onClick={() => setActiveTab(\"search\")}\r\n//         >\r\n//           Search\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Tab Content */}\r\n//       {activeTab === \"forYou\" && (\r\n//         <div>\r\n//           <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">\r\n//             Recommended Jobs\r\n//           </h2>\r\n//           <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n//             {recommendedJobs.map((job) => (\r\n//               <JobCard key={job.id} job={job} />\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {activeTab === \"search\" && (\r\n//         <div>\r\n//           <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">All Jobs</h2>\r\n//           <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n//             {loading ? (\r\n//               <p>Loading jobs...</p>\r\n//             ) : filteredJobs.length > 0 ? (\r\n//               filteredJobs.map((job) => <JobCard key={job.id} job={job} />)\r\n//             ) : (\r\n//               <p className=\"text-gray-500\">No jobs found.</p>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JobsPage;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport JobCard from \"../components/JobCard\";\r\nimport axios from \"axios\";\r\nimport jwtDecode from \"jwt-decode\"; // Ensure this package is installed\r\n\r\nconst JobsPage = () => {\r\n  const navigate = useNavigate();\r\n  const [activeTab, setActiveTab] = useState(\"forYou\");\r\n  const [recommendedJobs, setRecommendedJobs] = useState([]);\r\n  const [allJobs, setAllJobs] = useState([]);\r\n  const [filteredJobs, setFilteredJobs] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // Function to decode token and get user email\r\n  const getUserEmail = () => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n    if (!token) return null;\r\n    try {\r\n      const decodedToken = jwtDecode(token);\r\n      return decodedToken.sub; // Assuming `sub` contains the email\r\n    } catch (error) {\r\n      console.error(\"Invalid token:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Fetch Recommended Jobs for the User\r\n  const fetchRecommendedJobs = async (email) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:8080/api/jobs/recommended/${email}`\r\n      );\r\n      return response.data; // Assuming API returns an array of jobs\r\n    } catch (err) {\r\n      console.error(\"Error fetching recommended jobs:\", err);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // Fetch All Jobs\r\n  const fetchAllJobs = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(\"http://localhost:8080/api/jobs/all\");\r\n      if (response.status === 200) {\r\n        setAllJobs(response.data);\r\n      } else {\r\n        setError(`Error: ${response.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error fetching jobs:\", err);\r\n      setError(\"Network error. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Check similarity between two job titles\r\n  const isTitleSimilar = (title1, title2) => {\r\n    const normalize = (str) => str.toLowerCase().replace(/[^a-zA-Z0-9 ]/g, \"\");\r\n    return normalize(title1).includes(normalize(title2));\r\n  };\r\n\r\n  // Combine Recommended Jobs with Similar Jobs from All Jobs\r\n  const getCombinedRecommendedJobs = (recommended, all) => {\r\n    const similarJobs = all.filter((job) =>\r\n      recommended.some((recJob) => isTitleSimilar(job.role, recJob.role))\r\n    );\r\n    return [...new Set([...recommended, ...similarJobs])];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializeJobs = async () => {\r\n      const email = getUserEmail();\r\n      if (!email) {\r\n        navigate(\"/login\");\r\n        return;\r\n      }\r\n\r\n      const recommended = await fetchRecommendedJobs(email);\r\n      await fetchAllJobs();\r\n      const combinedRecommendedJobs = getCombinedRecommendedJobs(\r\n        recommended,\r\n        allJobs\r\n      );\r\n      setRecommendedJobs(combinedRecommendedJobs);\r\n    };\r\n\r\n    initializeJobs();\r\n  }, [navigate, allJobs]);\r\n\r\n  return (\r\n    <div className=\"p-6 pt-24 max-w-5xl mx-auto\">\r\n      {/* Tabs */}\r\n      <div className=\"flex justify-center gap-10 border-b mb-6\">\r\n        <button\r\n          className={`pb-2 text-lg font-semibold ${\r\n            activeTab === \"forYou\"\r\n              ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\r\n              : \"text-gray-600\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"forYou\")}\r\n        >\r\n          For you\r\n        </button>\r\n        <button\r\n          className={`pb-2 text-lg font-semibold ${\r\n            activeTab === \"search\"\r\n              ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\"\r\n              : \"text-gray-600\"\r\n          }`}\r\n          onClick={() => setActiveTab(\"search\")}\r\n        >\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      {/* Tab Content */}\r\n      {activeTab === \"forYou\" && (\r\n        <div>\r\n          <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">\r\n            Recommended Jobs\r\n          </h2>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {recommendedJobs.length > 0 ? (\r\n              recommendedJobs.map((job) => <JobCard key={job.id} job={job} />)\r\n            ) : (\r\n              <p className=\"text-gray-500\">No recommended jobs found.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === \"search\" && (\r\n        <div>\r\n          <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">All Jobs</h2>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {loading ? (\r\n              <p>Loading jobs...</p>\r\n            ) : filteredJobs.length > 0 ? (\r\n              filteredJobs.map((job) => <JobCard key={job.id} job={job} />)\r\n            ) : (\r\n              <p className=\"text-gray-500\">No jobs found.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobsPage;\r\n"],"mappings":";;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,QAAQ,CAAC;EACpD,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACe,OAAO,EAAEC,UA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}