{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\web\\\\job-portal\\\\src\\\\pages\\\\JobsPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport JobCard from \"../components/JobCard\";\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobsPage = () => {\n  _s();\n  const getUserEmail = () => {\n    //token\n    const token = localStorage.getItem(\"authToken\");\n    if (!token) return null;\n    try {\n      const decodedToken = jwtDecode(token);\n      return decodedToken.sub;\n    } catch (error) {\n      console.error(\"Invalid token:\", error);\n      return null;\n    }\n  };\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState(\"forYou\");\n  const [recommendedJobs, setRecommendedJobs] = useState([]);\n  const [allJobs, setAllJobs] = useState([]);\n  const [searchTitle, setSearchTitle] = useState(\"\");\n  const [searchCompany, setSearchCompany] = useState(\"\");\n  const [searchLocation, setSearchLocation] = useState(\"\");\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userEmail, setUserEmail] = useState(\"\"); // State to store user email\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [filteredJobs, setFilteredJobs] = useState([]);\n  const [matchedJobs, setMatchedJobs] = useState([]);\n\n  //Check if the user is logged in and retrieve the email\n  useEffect(() => {\n    const token = localStorage.getItem(\"authToken\");\n    if (token) {\n      setIsLoggedIn(true);\n      try {\n        const decodedToken = jwtDecode(token);\n        setUserEmail(decodedToken.email);\n      } catch (err) {\n        console.error(\"Error decoding token:\", err);\n        navigate(\"/login\");\n      }\n    } else {\n      setIsLoggedIn(false);\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n\n  // Fetch all jobs from the API once on component mount\n  useEffect(() => {\n    const fetchAllJobs = async () => {\n      setLoading(true);\n      try {\n        const response = await axios.get(\"http://localhost:8080/api/jobs/all\");\n        if (response.status === 200) {\n          setAllJobs(response.data);\n          setFilteredJobs(response.data); // Initially, set filtered jobs to all jobs\n        } else {\n          setError(`Error: ${response.statusText}`);\n        }\n      } catch (err) {\n        console.error(\"Error fetching jobs:\", err);\n        setError(\"Network error. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (allJobs.length === 0) {\n      fetchAllJobs();\n    }\n  }, [allJobs]);\n\n  // Automatically filter jobs based on search inputs\n  // useEffect(() => {\n  //   const filtered = allJobs.filter(\n  //     (job) =>\n  //       (job.role && job.role.toLowerCase().includes(searchTitle.toLowerCase())) &&\n  //       (job.company && job.company.toLowerCase().includes(searchCompany.toLowerCase())) &&\n  //       (job.location && job.location.toLowerCase().includes(searchLocation.toLowerCase()))\n  //   );\n  //   setFilteredJobs(filtered); // Update filtered jobs\n  //   setActiveTab(\"search\"); // Switch to search tab when filtering\n  // }, [searchTitle, searchCompany, searchLocation, allJobs]);\n  useEffect(() => {\n    const filteredAllJobs = allJobs.filter(job => job.role && job.role.toLowerCase().includes(searchTitle.toLowerCase()) && job.company && job.company.toLowerCase().includes(searchCompany.toLowerCase()) && job.location && job.location.toLowerCase().includes(searchLocation.toLowerCase()));\n    const filteredRecommended = recommendedJobs.filter(job => job.role && job.role.toLowerCase().includes(searchTitle.toLowerCase()) && job.company && job.company.toLowerCase().includes(searchCompany.toLowerCase()) && job.location && job.location.toLowerCase().includes(searchLocation.toLowerCase()));\n    setFilteredJobs(filteredAllJobs); // Update filtered jobs for all jobs tab\n    setRecommendedJobs(filteredRecommended); // Update filtered jobs for \"For You\" tab\n  }, [searchTitle, searchCompany, searchLocation, allJobs, recommendedJobs]);\n\n  // Fetch recommended jobs based on the logged-in user's email\n  const fetchRecommendedJobs = useCallback(async () => {\n    const userEmail = getUserEmail();\n    if (!userEmail) return;\n    setLoading(true);\n    try {\n      const allJobsResponse = await axios.get(\"http://localhost:8080/api/jobs/all\");\n      const recommendedResponse = await axios.get(`http://localhost:8080/api/jobs/recommended/${userEmail}`);\n      if (allJobsResponse.status === 200 && recommendedResponse.status === 200) {\n        const allJobsData = allJobsResponse.data;\n        const recommendedData = recommendedResponse.data;\n\n        // Match recommended job titles with allJobs roles\n        const matchedJobs = allJobsData.filter(job => recommendedData.some(recJob => {\n          // Split both role and jobTitle into arrays of words\n          const jobWords = job.role.trim().toLowerCase().split(/\\s+/); // Split by any whitespace\n          const recJobWords = recJob.jobTitle.trim().toLowerCase().split(/\\s+/)[0]; // Split by any whitespace\n\n          // Check if there is any common word between jobWords and recJobWords\n          return jobWords.some(word => recJobWords.includes(word));\n        }));\n        setRecommendedJobs(matchedJobs);\n      }\n    } catch (err) {\n      console.error(\"Error fetching recommended jobs:\", err);\n      setError(\"Network error. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [userEmail]);\n\n  // Fetch recommended jobs when activeTab is \"forYou\"\n  useEffect(() => {\n    if (activeTab === \"forYou\") {\n      fetchRecommendedJobs();\n    }\n  }, [activeTab, fetchRecommendedJobs]);\n  if (!isLoggedIn) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 pt-24 max-w-5xl mx-auto\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col sm:flex-row justify-center items-center gap-4 mb-6 bg-gray-100 p-4 rounded-lg shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Find your perfect job\",\n        value: searchTitle,\n        onChange: e => setSearchTitle(e.target.value),\n        className: \"p-3 border border-gray-300 rounded-md w-full sm:w-2/3 focus:ring-2 focus:ring-[#00ADB5]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Company\",\n        value: searchCompany,\n        onChange: e => setSearchCompany(e.target.value),\n        className: \"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Location\",\n        value: searchLocation,\n        onChange: e => setSearchLocation(e.target.value),\n        className: \"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center gap-10 border-b mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `pb-2 text-lg font-semibold ${activeTab === \"forYou\" ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\" : \"text-gray-600\"}`,\n        onClick: () => setActiveTab(\"forYou\"),\n        children: \"For you\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `pb-2 text-lg font-semibold ${activeTab === \"search\" ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\" : \"text-gray-600\"}`,\n        onClick: () => setActiveTab(\"search\"),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), activeTab === \"forYou\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4 text-[#00ADB5]\",\n        children: \"Recommended Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\",\n        children: recommendedJobs.length > 0 ? recommendedJobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n          job: job\n        }, job.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 44\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500\",\n          children: \"No recommended jobs found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), activeTab === \"search\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4 text-[#00ADB5]\",\n        children: \"All Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading jobs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this) : filteredJobs.length > 0 ? filteredJobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n          job: job\n        }, job.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 41\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500\",\n          children: \"No jobs found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(JobsPage, \"oD3LimirSzMu2th7Y0QE1pIbBLE=\", false, function () {\n  return [useNavigate];\n});\n_c = JobsPage;\nexport default JobsPage;\nvar _c;\n$RefreshReg$(_c, \"JobsPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","JobCard","axios","jwtDecode","jsxDEV","_jsxDEV","JobsPage","_s","getUserEmail","token","localStorage","getItem","decodedToken","sub","error","console","navigate","activeTab","setActiveTab","recommendedJobs","setRecommendedJobs","allJobs","setAllJobs","searchTitle","setSearchTitle","searchCompany","setSearchCompany","searchLocation","setSearchLocation","isLoggedIn","setIsLoggedIn","userEmail","setUserEmail","loading","setLoading","setError","filteredJobs","setFilteredJobs","matchedJobs","setMatchedJobs","email","err","fetchAllJobs","response","get","status","data","statusText","length","filteredAllJobs","filter","job","role","toLowerCase","includes","company","location","filteredRecommended","fetchRecommendedJobs","allJobsResponse","recommendedResponse","allJobsData","recommendedData","some","recJob","jobWords","trim","split","recJobWords","jobTitle","word","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","id","_c","$RefreshReg$"],"sources":["D:/project/web/job-portal/src/pages/JobsPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport JobCard from \"../components/JobCard\";\r\nimport axios from \"axios\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nconst JobsPage = () => {\r\n  const getUserEmail = () => {    //token\r\n      const token = localStorage.getItem(\"authToken\");\r\n      if (!token) return null;\r\n  \r\n      try {\r\n        const decodedToken = jwtDecode(token);\r\n        return decodedToken.sub;\r\n      } catch (error) {\r\n        console.error(\"Invalid token:\", error);\r\n        return null;\r\n      }\r\n    };  \r\n  const navigate = useNavigate();\r\n  const [activeTab, setActiveTab] = useState(\"forYou\");\r\n  const [recommendedJobs, setRecommendedJobs] = useState([]);\r\n  const [allJobs, setAllJobs] = useState([]);\r\n  const [searchTitle, setSearchTitle] = useState(\"\");\r\n  const [searchCompany, setSearchCompany] = useState(\"\"); \r\n  const [searchLocation, setSearchLocation] = useState(\"\");\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userEmail, setUserEmail] = useState(\"\"); // State to store user email\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\"); \r\n  const [filteredJobs, setFilteredJobs] = useState([]);\r\n  const [matchedJobs, setMatchedJobs] = useState([]);\r\n\r\n  //Check if the user is logged in and retrieve the email\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n    if (token) {\r\n      setIsLoggedIn(true);\r\n      try {\r\n        const decodedToken = jwtDecode(token);\r\n        setUserEmail(decodedToken.email);\r\n      } catch (err) {\r\n        console.error(\"Error decoding token:\", err);\r\n        navigate(\"/login\");\r\n      }\r\n    } else {\r\n      setIsLoggedIn(false);\r\n      navigate(\"/login\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  // Fetch all jobs from the API once on component mount\r\n  useEffect(() => {\r\n    const fetchAllJobs = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await axios.get(\"http://localhost:8080/api/jobs/all\");\r\n        if (response.status === 200) {\r\n          setAllJobs(response.data);\r\n          setFilteredJobs(response.data); // Initially, set filtered jobs to all jobs\r\n        } else {\r\n          setError(`Error: ${response.statusText}`);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching jobs:\", err);\r\n        setError(\"Network error. Please try again later.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (allJobs.length === 0) {\r\n      fetchAllJobs();\r\n    }\r\n  }, [allJobs]);\r\n\r\n  // Automatically filter jobs based on search inputs\r\n  // useEffect(() => {\r\n  //   const filtered = allJobs.filter(\r\n  //     (job) =>\r\n  //       (job.role && job.role.toLowerCase().includes(searchTitle.toLowerCase())) &&\r\n  //       (job.company && job.company.toLowerCase().includes(searchCompany.toLowerCase())) &&\r\n  //       (job.location && job.location.toLowerCase().includes(searchLocation.toLowerCase()))\r\n  //   );\r\n  //   setFilteredJobs(filtered); // Update filtered jobs\r\n  //   setActiveTab(\"search\"); // Switch to search tab when filtering\r\n  // }, [searchTitle, searchCompany, searchLocation, allJobs]);\r\n  useEffect(() => {\r\n    const filteredAllJobs = allJobs.filter(\r\n      (job) =>\r\n        (job.role && job.role.toLowerCase().includes(searchTitle.toLowerCase())) &&\r\n        (job.company && job.company.toLowerCase().includes(searchCompany.toLowerCase())) &&\r\n        (job.location && job.location.toLowerCase().includes(searchLocation.toLowerCase()))\r\n    );\r\n  \r\n    const filteredRecommended = recommendedJobs.filter(\r\n      (job) =>\r\n        (job.role && job.role.toLowerCase().includes(searchTitle.toLowerCase())) &&\r\n        (job.company && job.company.toLowerCase().includes(searchCompany.toLowerCase())) &&\r\n        (job.location && job.location.toLowerCase().includes(searchLocation.toLowerCase()))\r\n    );\r\n  \r\n    setFilteredJobs(filteredAllJobs); // Update filtered jobs for all jobs tab\r\n    setRecommendedJobs(filteredRecommended); // Update filtered jobs for \"For You\" tab\r\n  }, [searchTitle, searchCompany, searchLocation, allJobs, recommendedJobs]);\r\n  \r\n\r\n  // Fetch recommended jobs based on the logged-in user's email\r\n  const fetchRecommendedJobs = useCallback(async () => {\r\n    const userEmail=getUserEmail();\r\n    if (!userEmail) return;\r\n    setLoading(true);\r\n    try {\r\n      const allJobsResponse = await axios.get(\"http://localhost:8080/api/jobs/all\");\r\n      const recommendedResponse = await axios.get(\r\n        `http://localhost:8080/api/jobs/recommended/${userEmail}`\r\n      );\r\n\r\n      if (allJobsResponse.status === 200 && recommendedResponse.status === 200) {\r\n        const allJobsData = allJobsResponse.data;\r\n        const recommendedData = recommendedResponse.data;\r\n\r\n        // Match recommended job titles with allJobs roles\r\n        const matchedJobs = allJobsData.filter((job) =>\r\n          recommendedData.some((recJob) => {\r\n            // Split both role and jobTitle into arrays of words\r\n            const jobWords = job.role.trim().toLowerCase().split(/\\s+/); // Split by any whitespace\r\n            const recJobWords = recJob.jobTitle.trim().toLowerCase().split(/\\s+/)[0]; // Split by any whitespace\r\n        \r\n            // Check if there is any common word between jobWords and recJobWords\r\n            return jobWords.some((word) => recJobWords.includes(word));\r\n          })\r\n        );\r\n        setRecommendedJobs(matchedJobs);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error fetching recommended jobs:\", err);\r\n      setError(\"Network error. Please try again later.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [userEmail]);\r\n\r\n  // Fetch recommended jobs when activeTab is \"forYou\"\r\n  useEffect(() => {\r\n    if (activeTab === \"forYou\") {\r\n      fetchRecommendedJobs();\r\n    }\r\n  }, [activeTab, fetchRecommendedJobs]);\r\n\r\n  if (!isLoggedIn) return null;\r\n\r\n  return (\r\n    <div className=\"p-6 pt-24 max-w-5xl mx-auto\">\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n\r\n      {/* Search Bar */}\r\n      <div className=\"flex flex-col sm:flex-row justify-center items-center gap-4 mb-6 bg-gray-100 p-4 rounded-lg shadow\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Find your perfect job\"\r\n          value={searchTitle}\r\n          onChange={(e) => setSearchTitle(e.target.value)}\r\n          className=\"p-3 border border-gray-300 rounded-md w-full sm:w-2/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Company\"\r\n          value={searchCompany}\r\n          onChange={(e) => setSearchCompany(e.target.value)}\r\n          className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Location\"\r\n          value={searchLocation}\r\n          onChange={(e) => setSearchLocation(e.target.value)}\r\n          className=\"p-3 border border-gray-300 rounded-md w-full sm:w-1/3 focus:ring-2 focus:ring-[#00ADB5]\"\r\n        />\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <div className=\"flex justify-center gap-10 border-b mb-6\">\r\n        <button\r\n          className={`pb-2 text-lg font-semibold ${activeTab === \"forYou\" ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\" : \"text-gray-600\"}`}\r\n          onClick={() => setActiveTab(\"forYou\")}\r\n        >\r\n          For you\r\n        </button>\r\n        <button\r\n          className={`pb-2 text-lg font-semibold ${activeTab === \"search\" ? \"border-b-4 border-[#00ADB5] text-[#00ADB5]\" : \"text-gray-600\"}`}\r\n          onClick={() => setActiveTab(\"search\")}\r\n        >\r\n          Search\r\n        </button>\r\n      </div>\r\n\r\n      {/* Tab Content */}\r\n      {activeTab === \"forYou\" && (\r\n        <div>\r\n          <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">Recommended Jobs</h2>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {recommendedJobs.length > 0 ? (\r\n              recommendedJobs.map((job) => <JobCard key={job.id} job={job} />)\r\n            ) : (\r\n              <p className=\"text-gray-500\">No recommended jobs found.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === \"search\" && (\r\n        <div>\r\n          <h2 className=\"text-2xl font-semibold mb-4 text-[#00ADB5]\">All Jobs</h2>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {loading ? (\r\n              <p>Loading jobs...</p>\r\n            ) : filteredJobs.length > 0 ? (\r\n              filteredJobs.map((job) => <JobCard key={job.id} job={job} />)\r\n            ) : (\r\n              <p className=\"text-gray-500\">No jobs found.</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobsPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}