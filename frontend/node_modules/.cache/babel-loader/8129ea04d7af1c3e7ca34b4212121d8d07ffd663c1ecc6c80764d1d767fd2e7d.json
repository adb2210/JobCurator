{"ast":null,"code":"var _jsxFileName = \"D:\\\\JobCurator\\\\frontend\\\\src\\\\components\\\\Navbar.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n\n// const Navbar = ({ isAuthenticated, setIsAuthenticated }) => {\n//   const navigate = useNavigate();\n//   const loggedInUser = JSON.parse(localStorage.getItem(\"loggedInUser\")); // Retrieve logged-in user object\n\n//   useEffect(() => {\n//     // Check if there's a logged-in user and update the state\n//     const loggedInUser = localStorage.getItem(\"loggedInUser\");\n//     setIsAuthenticated(!!loggedInUser); // Set to true if logged-in user exists\n//   }, [setIsAuthenticated]);\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('authToken'); // Remove user data from localStorage\n//     setIsAuthenticated(false); // Update state to reflect logged-out status\n//     navigate(\"/login\"); // Redirect to login page\n//   };\n\n//   const handleJobsClick = () => {\n//     if (isAuthenticated) {\n//       navigate(\"/jobs\"); // Navigate to the jobs page if authenticated\n//     } else {\n//       alert(\"Please Login First\"); // Alert and redirect to login page if not authenticated\n//       navigate(\"/login\");\n//     }\n//   };\n\n//   const handleProfile= () => {\n//     if (isAuthenticated) {\n//       navigate(\"/profile\"); // Navigate to Admin Panel if user is admin\n//     } else {\n//       alert(\"You need to log in as an admin to access the Admin Panel.\");\n//       navigate(\"/login\"); // Redirect to login page if not an admin or not authenticated\n//     }\n//   };\n\n//   return (\n//     <nav className=\"bg-gray-800 text-white p-4 fixed w-full top-0 left-0 z-50 shadow-lg\">\n//       <div className=\"flex justify-between items-center\">\n//         <div className=\"text-2xl font-bold\">\n//           <Link to=\"/\" className=\"hover:bg-gray-700 p-2 rounded\">\n//             JobCurator\n//           </Link>\n//         </div>\n//         <div className=\"space-x-6 flex items-center ml-4\">\n//           <button onClick={handleJobsClick} className=\"hover:bg-gray-700 p-2 rounded\">\n//             Jobs\n//           </button>\n//           {!isAuthenticated && (\n//             <>\n//               <Link to=\"/signup\" className=\"hover:bg-gray-700 p-2 rounded\">\n//                 Sign Up\n//               </Link>\n//               <Link to=\"/login\" className=\"hover:bg-gray-700 p-2 rounded\">\n//                 Login\n//               </Link>\n//             </>\n//           )}\n//           {isAuthenticated && (\n//             <>\n//               <button onclick={handleProfile} className=\"hover:bg-gray-700 p-2 rounded\">\n//                 Profile\n//               </button>\n//               <button onClick={handleLogout} className=\"bg-red-500 text-white p-2 rounded hover:bg-red-700\">\n//                 Logout\n//               </button>\n//             </>\n//           )}\n//         </div>\n//       </div>\n//     </nav>\n//   );\n// };\n\n// export default Navbar;\nimport React, { useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Navbar = ({\n  isAuthenticated,\n  setIsAuthenticated\n}) => {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check if there's an auth token to update authentication state\n    const authToken = localStorage.getItem(\"authToken\");\n    setIsAuthenticated(!!authToken); // Update authentication status based on token presence\n  }, [setIsAuthenticated]);\n  const handleLogout = () => {\n    localStorage.removeItem(\"authToken\"); // Remove auth token from localStorage\n    setIsAuthenticated(false); // Update state to reflect logged-out status\n    navigate(\"/login\"); // Redirect to login page\n  };\n  const handleJobsClick = () => {\n    if (isAuthenticated) {\n      navigate(\"/jobs\"); // Navigate to jobs page if authenticated\n    } else {\n      alert(\"Please login first!\"); // Alert the user and redirect to login if unauthenticated\n      navigate(\"/login\");\n    }\n  };\n  const handleProfileClick = () => {\n    if (isAuthenticated) {\n      navigate(\"/profile\"); // Navigate to the profile page if authenticated\n    } else {\n      alert(\"Please login to access your profile.\"); // Alert and redirect to login if unauthenticated\n      navigate(\"/login\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"bg-gray-800 text-white p-4 fixed w-full top-0 left-0 z-50 shadow-lg\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-2xl font-bold\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"hover:bg-gray-700 p-2 rounded\",\n          children: \"JobCurator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-x-6 flex items-center ml-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleJobsClick,\n          className: \"hover:bg-gray-700 p-2 rounded\",\n          children: \"Jobs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), !isAuthenticated ?\n        /*#__PURE__*/\n        // Show Signup and Login buttons for unauthenticated users\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/signup\",\n            className: \"hover:bg-gray-700 p-2 rounded\",\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            className: \"hover:bg-gray-700 p-2 rounded\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) :\n        /*#__PURE__*/\n        // Show Profile and Logout buttons for authenticated users\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleProfileClick,\n            className: \"hover:bg-gray-700 p-2 rounded\",\n            children: \"Profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLogout,\n            className: \"bg-red-500 text-white p-2 rounded hover:bg-red-700\",\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(Navbar, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useEffect","Link","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Navbar","isAuthenticated","setIsAuthenticated","_s","navigate","authToken","localStorage","getItem","handleLogout","removeItem","handleJobsClick","alert","handleProfileClick","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/JobCurator/frontend/src/components/Navbar.jsx"],"sourcesContent":["// import React, { useEffect } from \"react\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n\r\n// const Navbar = ({ isAuthenticated, setIsAuthenticated }) => {\r\n//   const navigate = useNavigate();\r\n//   const loggedInUser = JSON.parse(localStorage.getItem(\"loggedInUser\")); // Retrieve logged-in user object\r\n\r\n//   useEffect(() => {\r\n//     // Check if there's a logged-in user and update the state\r\n//     const loggedInUser = localStorage.getItem(\"loggedInUser\");\r\n//     setIsAuthenticated(!!loggedInUser); // Set to true if logged-in user exists\r\n//   }, [setIsAuthenticated]);\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('authToken'); // Remove user data from localStorage\r\n//     setIsAuthenticated(false); // Update state to reflect logged-out status\r\n//     navigate(\"/login\"); // Redirect to login page\r\n//   };\r\n\r\n//   const handleJobsClick = () => {\r\n//     if (isAuthenticated) {\r\n//       navigate(\"/jobs\"); // Navigate to the jobs page if authenticated\r\n//     } else {\r\n//       alert(\"Please Login First\"); // Alert and redirect to login page if not authenticated\r\n//       navigate(\"/login\");\r\n//     }\r\n//   };\r\n\r\n//   const handleProfile= () => {\r\n//     if (isAuthenticated) {\r\n//       navigate(\"/profile\"); // Navigate to Admin Panel if user is admin\r\n//     } else {\r\n//       alert(\"You need to log in as an admin to access the Admin Panel.\");\r\n//       navigate(\"/login\"); // Redirect to login page if not an admin or not authenticated\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <nav className=\"bg-gray-800 text-white p-4 fixed w-full top-0 left-0 z-50 shadow-lg\">\r\n//       <div className=\"flex justify-between items-center\">\r\n//         <div className=\"text-2xl font-bold\">\r\n//           <Link to=\"/\" className=\"hover:bg-gray-700 p-2 rounded\">\r\n//             JobCurator\r\n//           </Link>\r\n//         </div>\r\n//         <div className=\"space-x-6 flex items-center ml-4\">\r\n//           <button onClick={handleJobsClick} className=\"hover:bg-gray-700 p-2 rounded\">\r\n//             Jobs\r\n//           </button>\r\n//           {!isAuthenticated && (\r\n//             <>\r\n//               <Link to=\"/signup\" className=\"hover:bg-gray-700 p-2 rounded\">\r\n//                 Sign Up\r\n//               </Link>\r\n//               <Link to=\"/login\" className=\"hover:bg-gray-700 p-2 rounded\">\r\n//                 Login\r\n//               </Link>\r\n//             </>\r\n//           )}\r\n//           {isAuthenticated && (\r\n//             <>\r\n//               <button onclick={handleProfile} className=\"hover:bg-gray-700 p-2 rounded\">\r\n//                 Profile\r\n//               </button>\r\n//               <button onClick={handleLogout} className=\"bg-red-500 text-white p-2 rounded hover:bg-red-700\">\r\n//                 Logout\r\n//               </button>\r\n//             </>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </nav>\r\n//   );\r\n// };\r\n\r\n// export default Navbar;\r\nimport React, { useEffect } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nconst Navbar = ({ isAuthenticated, setIsAuthenticated }) => {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Check if there's an auth token to update authentication state\r\n    const authToken = localStorage.getItem(\"authToken\");\r\n    setIsAuthenticated(!!authToken); // Update authentication status based on token presence\r\n  }, [setIsAuthenticated]);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"authToken\"); // Remove auth token from localStorage\r\n    setIsAuthenticated(false); // Update state to reflect logged-out status\r\n    navigate(\"/login\"); // Redirect to login page\r\n  };\r\n\r\n  const handleJobsClick = () => {\r\n    if (isAuthenticated) {\r\n      navigate(\"/jobs\"); // Navigate to jobs page if authenticated\r\n    } else {\r\n      alert(\"Please login first!\"); // Alert the user and redirect to login if unauthenticated\r\n      navigate(\"/login\");\r\n    }\r\n  };\r\n\r\n  const handleProfileClick = () => {\r\n    if (isAuthenticated) {\r\n      navigate(\"/profile\"); // Navigate to the profile page if authenticated\r\n    } else {\r\n      alert(\"Please login to access your profile.\"); // Alert and redirect to login if unauthenticated\r\n      navigate(\"/login\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav className=\"bg-gray-800 text-white p-4 fixed w-full top-0 left-0 z-50 shadow-lg\">\r\n      <div className=\"flex justify-between items-center\">\r\n        {/* Logo */}\r\n        <div className=\"text-2xl font-bold\">\r\n          <Link to=\"/\" className=\"hover:bg-gray-700 p-2 rounded\">\r\n            JobCurator\r\n          </Link>\r\n        </div>\r\n        {/* Navigation Links */}\r\n        <div className=\"space-x-6 flex items-center ml-4\">\r\n          <button onClick={handleJobsClick} className=\"hover:bg-gray-700 p-2 rounded\">\r\n            Jobs\r\n          </button>\r\n          {!isAuthenticated ? (\r\n            // Show Signup and Login buttons for unauthenticated users\r\n            <>\r\n              <Link to=\"/signup\" className=\"hover:bg-gray-700 p-2 rounded\">\r\n                Sign Up\r\n              </Link>\r\n              <Link to=\"/login\" className=\"hover:bg-gray-700 p-2 rounded\">\r\n                Login\r\n              </Link>\r\n            </>\r\n          ) : (\r\n            // Show Profile and Logout buttons for authenticated users\r\n            <>\r\n              <button onClick={handleProfileClick} className=\"hover:bg-gray-700 p-2 rounded\">\r\n                Profile\r\n              </button>\r\n              <button\r\n                onClick={handleLogout}\r\n                className=\"bg-red-500 text-white p-2 rounded hover:bg-red-700\"\r\n              >\r\n                Logout\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}